---------------------------------------------------------------------------------
index.html:
---------------------------------------------------------------------------------

<!DOCTYPE html>
<html>

<head>
  <title>Audio Player</title>
  <link rel="stylesheet" type="text/css" href="../style.css">
  <link rel="stylesheet" type="text/css" href="./style.css">
  <script src="https://kit.fontawesome.com/cd8cff598a.js" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="script.js"></script>
  <!--#include virtual="../includes/header.html" -->
</head>

<body>
  <h1>Audio Player</h1>
  <audio id="audio-player" controls src="./assets/audio.mp3"></audio>
  <div id="audio-controls">
    <div id="audio-details">
      <h2>Audio File: </h2>
      <span id="audio-filename">WQUT 101.5 Johnson City, TN - 13 July 1989</span>
      <h2>Current Time: <span id="current-time">0:00</span></h2>
    </div>
    <div id="audio-buttons">
      <i class="fas fa-rotate-left" id="rewind-button"></i>
      <i class="fas fa-play" id="play-pause-button"></i>
      <i class="fas fa-rotate-right" id="forward-button"></i>
    </div>
    <div id="playlist-buttons">
      <input type="text" name="item-text-input" id="item-text-input" placeholder="New entry...">
      <i class="fas fa-plus" id="add-title-button"></i>
    </div>
    <ul id="playlist">
      <!-- Playlist items will be added here -->
    </ul>
  </div>
  <!--#include virtual="../includes/footer.html" -->
</body>

</html>

---------------------------------------------------------------------------------
style.css:
---------------------------------------------------------------------------------
ul#playlist {
  display: flex;
  width: fit-content;
  align-self: center;
  flex-direction: column;
  justify-content: center;
  padding: 0;
  gap: 0
}

li#item {
  display: flex;
  list-style: none;
  color: #191f38;
  margin: 5px auto;
  gap: 10px;
  width: 100%;
  align-items: center;
  justify-content: center;
}

li#item>p,
li#item>i {
  padding: 5px;
  background: bisque;
  border-radius: 5px;
}

li#item>p {
  text-align: right;
}

li#item>i {
  font-size: 20px;
  padding: 5px 10px;
}

div#audio-buttons {
  display: flex;
  align-self: center;
  background: bisque;
  width: fit-content;
  padding: 5px;
  gap: 2px;
  border-radius: 200px;
}

.fa-play:hover {
  padding-left: 14px !important;
  margin-right: 4px !important;
}

.fa-pause:hover {
  padding: 10px 12px !important;
}

#audio-buttons>i {
  color: #191f38;
  font-size: 20px;
  background: bisque;
  border-radius: 50%;
  padding: 10px;
  transition: all 0.3s ease;
}

#audio-buttons>i:hover {
  background: #191f38;
  color: bisque;
  transition: all 0.3s ease;
}


div#audio-controls {
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 10px;
}

div#playlist-buttons {
  display: flex;
  align-items: center;
  width: fit-content;
  align-self: center;
  height: 35px;
  padding: 5px;
  gap: 5px;
  margin-bottom: -15px;
}

input#item-text-input {
  border-radius: 5px;
  height: 100%;
  margin-bottom: 5px;
}

i#add-title-button:hover {
  cursor: pointer;
}
---------------------------------------------------------------------------------
script.js:
---------------------------------------------------------------------------------
$(document).ready(function () {
	const audioFileData = [
		{ title: "Beginning", time: "0:00" },
		{ title: "Song 1", time: "0:23" },
		{ title: "WQUT Readout 1", time: "0:50" },
		{ title: "Song 2", time: "1:02" },
		{ title: "Community Announcements", time: "1:13" },
		{ title: "Song 3", time: "1:51" },
	];

	function generateUniqueId() {
		return Date.now();
	}

	// Function to populate the playlist
	function populatePlaylist() {
		const playlist = $("#playlist");
		playlist.empty();

		$.each(audioFileData, function (index, item) {
			const uniqueId = generateUniqueId(); // Generate a unique ID
			const titleButton = $("<li id='item'>").attr("data-id", uniqueId);
			const titleButtonText = $("<p>").text(`${item.title} - ${item.time}`);
			titleButton.append(titleButtonText);

			$(titleButton).on("click", function () {
				// Play the audio from the specified time
				const audioPlayer = $("#audio-player")[0];
				const [minutes, seconds] = item.time.split(":");
				audioPlayer.currentTime = parseInt(minutes) * 60 + parseInt(seconds);
				if (!audioPlayer.paused) {
					playPauseButton.click();
				}
				playPauseButton.click();
			});

			const removeTitleButton = $("<i class='fas fa-times-circle' id='remove-title-button'>");
			$(removeTitleButton).on("click", function () {
				const audioPlayer = $("#audio-player")[0];
				const currentTime = audioPlayer.currentTime;
				const $clickedItem = $(titleButton);
				const clickedItemId = $clickedItem.attr("data-id");

				// Remove the item from the playlist
				$clickedItem.remove();

				// Remove the corresponding data entry
				audioFileData = audioFileData.filter(item => {
					return item.title !== $clickedItem.text().trim();
				});
			});

			titleButton.append(removeTitleButton);

			playlist.append(titleButton);
		});
	}

	// Function to update the current time display
	function updateCurrentTime() {
		const audioPlayer = $("#audio-player")[0];
		const currentTime = $("#current-time");
		const minutes = Math.floor(audioPlayer.currentTime / 60);
		const seconds = Math.floor(audioPlayer.currentTime % 60);
		currentTime.text(`${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);
	}

	// Initial setup
	const playPauseButton = $("#play-pause-button");
	$(playPauseButton).on("click", () => {
		const audioPlayer = $("#audio-player")[0];
		if (audioPlayer.paused) {
			audioPlayer.play();
			playPauseButton.attr("class", "fas fa-pause");
		} else {
			audioPlayer.pause();
			playPauseButton.attr("class", "fas fa-play");
		}
	});

	const rewindButton = $("#rewind-button");
	$(rewindButton).on("click", () => {
		const audioPlayer = $("#audio-player")[0];
		audioPlayer.currentTime -= 5;
	});

	const forwardButton = $("#forward-button");
	$(forwardButton).on("click", () => {
		const audioPlayer = $("#audio-player")[0];
		audioPlayer.currentTime += 5;
	});

	function addTitleToPlaylist(title, time) {
		const uniqueId = generateUniqueId();
		const titleButton = $("<li id='item'>").attr("data-id", uniqueId);
		const titleButtonText = $("<p>").text(title);
		titleButton.append(titleButtonText);

		$(titleButton).on("click", function () {
			// Play the audio from the specified time
			const audioPlayer = $("#audio-player")[0];
			const [minutes, seconds] = time.split(":");
			audioPlayer.currentTime = parseInt(minutes) * 60 + parseInt(seconds);
			if (!audioPlayer.paused) {
				playPauseButton.click();
			}
			playPauseButton.click();
		});

		const removeTitleButton = $("<i class='fas fa-times-circle' id='remove-title-button'>");
		$(removeTitleButton).on("click", function () {
			const audioPlayer = $("#audio-player")[0];
			const currentTime = audioPlayer.currentTime;
			const $clickedItem = $(titleButton);
			const clickedItemId = $clickedItem.attr("data-id");

			// Remove the item from the playlist
			$clickedItem.remove();

			// Remove the corresponding data entry
			audioFileData = audioFileData.filter(item => {
				return item.title !== $clickedItem.text().trim();
			});
		});

		titleButton.append(removeTitleButton);

		$("#playlist").append(titleButton);
	}

	function addTitle() {
		const audioPlayer = $("#audio-player")[0];
		const currentTime = audioPlayer.currentTime;

		const titleInput = $("#item-text-input");
		const title = titleInput.val().trim();

		if (title) {
			const minutes = Math.floor(currentTime / 60);
			const seconds = Math.floor(currentTime % 60);
			const formattedTime = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
			audioFileData.push({ title: `${title}`, time: formattedTime });
			addTitleToPlaylist(`${title} - ${formattedTime}`, formattedTime);
			titleInput.val('');
		}
	}

	const addTitleButton = $("#add-title-button");
	$(addTitleButton).on("click", addTitle);

	const enterEvent = $("#item-text-input");
	$(enterEvent).on("keydown", (e) => {
		if (e.which === 13) {
			addTitle();
		}
	})

	const audioPlayer = $("#audio-player")[0];
	$(audioPlayer).on("timeupdate", updateCurrentTime);

	// Populate the playlist
	populatePlaylist();
});

---------------------------------------------------------------------------------
../style.css:
---------------------------------------------------------------------------------
@import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');

* {
  margin: 0;
  box-sizing: border-box;
  text-decoration: none;
  font-family: 'Courier Prime', monospace;
}

html {
  background-color: #191f38;
  color: bisque;
  height: 100vh;
}

body {
  margin: 0;
  position: relative;
  text-align: center;
  height: 100%;
  width: 100%;
}

img {
  min-width: 200px;
  max-width: 500px;
  width: 40%;
}

aside {
  font-weight: 450;
  padding-bottom: 3px;
}

div.subheadder {
  padding-bottom: 10px;
}

hr {
  margin: 5px auto;
  width: 45%;
  max-width: 700px;
  border: 1px solid bisque;
}

p {
  font-weight: 450;
}

h1 {
  padding: 0.67em;
  margin: 0;
  text-decoration: underline;
}

h3 {
  font-weight: 550;
}

a {
  padding-right: 30px;
  padding-left: 30px;
  color: bisque;
}

.body-content {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: center;
  margin: 0 20px;
}

.art-flexbox {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: center;
  width: 60%;
  min-width: 300px;
  max-width: 800px;
  margin: auto;
  border: 10px solid bisque;
  background-color: bisque;
  border-radius: 20px;
}

.art-item {
  width: 50%;
  display: flex;
  min-width: 300px;
  align-items: center;
  justify-content: center;
}

.art-item>img {
  display: flex;
  width: 95%;
  height: 95%;
}

#spawn_area {
  position: absolute;
  width: 100%;
  height: 85%;
}

.fButton {
  position: absolute;
  width: 50px;
  height: 30px;
}

.button_spawn_form {
  display: flex;
  flex-direction: column;
  height: 15%;
}